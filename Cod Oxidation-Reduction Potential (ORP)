/*
    ------ WIFI Example --------

    Explanation: This example shows how to perform HTTP GET requests

    Copyright (C) 2021 Libelium Comunicaciones Distribuidas S.L.
    http://www.libelium.com

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

    Version:           3.0
    Implementation:    Luis Miguel Mart√≠
*/

// Put your libraries here (#include ...)
#include <WaspWIFI_PRO_V3.h>
#include <WaspFrame.h>
#include <WaspSensorSW.h>

// choose socket (SELECT USER'S SOCKET)
///////////////////////////////////////
uint8_t socket = SOCKET0;
///////////////////////////////////////

// choose HTTP server settings
///////////////////////////////////////
char type[] = "http";
char host[] = "82.78.81.178";
uint16_t port = 80;
///////////////////////////////////////

float value_orp;
float value_orp_calculated;

// Calibration values
#define CAL_POINT_10 1.985
#define CAL_POINT_7 2.070
#define CAL_POINT_4 2.227
// Temperature at which calibration was carried out
#define CAL_TEMP 23.7
// Offset obtained from sensor calibration
#define CALIBRATION_OFFSET 0.0
// Calibration of the sensor in normal air
#define AIR_CALIBRATION 2.65
// Calibration of the sensor under 0% solution
#define ZERO_CALIBRATION 0.0
// Value 1 used to calibrate the sensor
#define POINT1_COND 10500
// Value 2 used to calibrate the sensor
#define POINT2_COND 40000
// Point 1 of the calibration
#define POINT1_CAL 197.00
// Point 2 of the calibration
#define POINT2_CAL 150.00

ORPClass ORPSensor;
// define the Waspmote ID
char moteID[] = "Stanescu_Vlad";

void setup()
{
  USB.println(F("Start program"));

  USB.println(F("***************************************"));
  USB.println(F("It is assumed the module was previously"));
  USB.println(F("configured in autoconnect mode and with"));
  USB.println(F("the Meshlium AP settings."));
  USB.println(F("Once the module is configured with the"));
  USB.println(F("AP settings, it attempts to join the AP"));
  USB.println(F("automatically once it is powered on"));
  USB.println(F("Refer to example 'WIFI_02' to configure"));
  USB.println(F("the WiFi module with proper settings"));
  USB.println(F("***************************************"));

  // set the Waspmote ID
  frame.setID(moteID);
}

void loop()
{
  //////////////////////////////////////////////////
  // 1. Switch ON
  //////////////////////////////////////////////////
  uint8_t error = WIFI_PRO_V3.ON(socket);

  if (error == 0)
  {
    USB.println(F("WiFi switched ON"));
  }
  else
  {
    USB.println(F("WiFi did not initialize correctly"));
  }

  // check connectivity
  bool status = WIFI_PRO_V3.isConnected();

  // check if module is connected
  if (status == true)
  {
    ///////////////////////////////
    // 3.1. Create a new Frame
    ///////////////////////////////

    // create new frame (only ASCII)
    frame.createFrame(ASCII);

    // add sensor fields
   
    frame.addSensor(SENSOR_BAT, PWR.getBatteryLevel());

    // print frame
    frame.showFrame();

    Water.ON();
    delay(2000);

    ///////////////////////////////////////////
    // 2. Read sensors
    ///////////////////////////////////////////

    // Reading of the ORP sensor
    value_orp = ORPSensor.readORP();
    // Apply the calibration offset
    value_orp_calculated = value_orp - CALIBRATION_OFFSET;

    ///////////////////////////////////////////
    // 3. Turn off the sensors
    ///////////////////////////////////////////

    Water.OFF();

    ///////////////////////////////////////////
    // 4. Create ASCII frame
    ///////////////////////////////////////////

    // Create new frame (ASCII)
    frame.createFrame(ASCII);

    // Add ORP value
    frame.addSensor(SENSOR_WATER_ORP, value_orp_calculated);

    // Show the frame
    frame.showFrame();

    // wait 2 seconds
    delay(2000);
    ///////////////////////////////
    // 3.2. Send Frame to Meshlium
    ///////////////////////////////

    // http frame
    error = WIFI_PRO_V3.sendFrameToMeshlium(type, host, port, frame.buffer, frame.length);

    // check response
    if (error == 0)
    {
      USB.println(F("Send frame to meshlium done"));
    }
    else
    {
      USB.println(F("Error sending frame"));
      if (WIFI_PRO_V3._httpResponseStatus)
      {
        USB.print(F("HTTP response status: "));
        USB.println(WIFI_PRO_V3._httpResponseStatus);
      }
    }
  }
  else
  {
    USB.println(F("2. WiFi is connected ERROR"));
  }
  //////////////////////////////////////////////////
  // 3. Switch OFF
  //////////////////////////////////////////////////
  WIFI_PRO_V3.OFF(socket);
  USB.println(F("WiFi switched OFF\n\n"));
  delay(10000);
}
